{"version":3,"sources":["../server.js"],"names":["express","require","app","server","createServer","io","listen","message","chatRoom","users","connections","messages","console","log","set","use","static","__dirname","get","req","res","find","err","rooms","error","render","sockets","on","socket","currentRoom","push","length","join","data","splice","indexOf","username","updateUsernames","room","emit","callback","in","user","newMsg","save","newRoom","object","image","userImage"],"mappings":"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","file":"server.js","sourcesContent":["// /**\r\n//  * Created by Kasper Terp on 21-02-2017.\r\n//  */\r\n// const express = require('express');\r\n// const app = express();\r\n// const server = require('http').createServer(app);\r\n// const io = require('socket.io').listen(server);\r\n// const mongoose = require('mongoose');\r\n// const message = require('./dist/Models/schema.server.model');\r\n//\r\n// users = [];\r\n// connections =[];\r\n// app.use(express.static(__dirname + '/'));\r\n// server.listen(process.env.PORT || 3000);\r\n// console.log(\"server is running\");\r\n//\r\n// app.get('/', function (req, res) {\r\n//     res.sendFile(__dirname + '/index.ejs')\r\n//\r\n// });\r\n//\r\n// // //new user\r\n// // socket.on('new user', function (data, callback) {\r\n// //     callback(true);\r\n// //     username = socket.username;\r\n// // });\r\n//\r\n//\r\n// io.sockets.on('connection', function (socket) {\r\n//     connections.push(socket);\r\n//     console.log('connected : %s socekts connected', + connections.length);\r\n//     // discconnect\r\n//     socket.on('disconnect', function (data) {\r\n//         connections.splice(connections.indexOf(socket), 1);\r\n//         console.log(\"disconnected: %s  sockets connected\", + connections.length)\r\n//     });\r\n//     socket.on ('send message', function (data) {\r\n//         io.sockets.emit('new message', {msg: data});\r\n//         console.log(data);\r\n//         let newMsg = new message({user: socket.user, message: data, room: socket.chatroom});\r\n//         newMsg.save(function (err, newMsg) {\r\n//             if(err) return console.log(err);\r\n//             console.log(\"im saved fuckeheads\");\r\n//\r\n//         });\r\n//\r\n//     });\r\n// });\r\n\r\nconst express = require('express');\r\nconst app = express();\r\nconst server = require('http').createServer(app);\r\nconst io = require('socket.io').listen(server);\r\nconst message = require('./dist/Models/schema.server.model');\r\nlet chatRoom = require('./dist/Models/schema.chatrooms.model');\r\nconst users = [];\r\nconst connections = [];\r\nlet messages= [];\r\n\r\nserver.listen(3000);\r\nconsole.log('Server running...');\r\n\r\napp.set('view engine', 'ejs');\r\n// Allow static files to be used\r\napp.use(express.static(__dirname + '/'));\r\n\r\napp.get('/',function (req, res) {\r\n\r\n    chatRoom.find(function (err, rooms) {\r\n        if(err) return console.error(err);\r\n        res.render('index',{chatRoom: rooms});\r\n    });\r\n});\r\n\r\nio.sockets.on('connection', function(socket){\r\n    let currentRoom = 'room 1';\r\n    connections.push(socket);\r\n    console.log('Connected: %s sockets connected', connections.length);\r\n    socket.join(currentRoom);\r\n\r\n    // Disconnect\r\n    socket.on('disconnect', function(data){\r\n        users.splice(users.indexOf(socket.username), 1);\r\n        updateUsernames();\r\n        connections.splice(connections.indexOf(socket), 1);\r\n        console.log('Disconnected: %s sockets connected', connections.length);\r\n    });\r\n    //Getting messages for current default room, before the socket\r\n    message.find({room: currentRoom},function (err, messages) {\r\n        if(err) return console.error(err);\r\n        io.sockets.emit('get messages', messages);\r\n    });\r\n\r\n    //new user\r\n    socket.on('new user', function (data, callback) {\r\n        callback(true);\r\n        username = socket.username;\r\n    });\r\n    // Send message\r\n    socket.on('send message', function(data){\r\n        io.in(currentRoom).emit('new message', {message: data.message, user: data.user});\r\n        // Create new message\r\n        let newMsg = new message ({ user: data.user, message: data.message, room: currentRoom });\r\n\r\n        // Insert to db\r\n        newMsg.save(function (err, newMsg) {\r\n            if (err) return console.error(err);\r\n            console.log(\"message is saved\");\r\n        });\r\n\r\n    });\r\n    socket.on('create room',function(data) {\r\n        io.emit('new room',{room: data});\r\n        const newRoom = new chatRoom({ room: data});\r\n        newRoom.save(function (err, newRoom) {\r\n            if (err) return console.error(err);\r\n            console.log(\"room is saved\");\r\n        });\r\n    });\r\n    socket.on('selected room', function (data) {\r\n        currentRoom = data;\r\n        socket.join(currentRoom);\r\n\r\n        message.find({room: data},function (err, messages) {\r\n            if(err) return console.error(err);\r\n            console.log(messages);\r\n            io.sockets.emit('get messages', messages);\r\n        });\r\n    });\r\n\r\n    // New user\r\n    socket.on('new user', function(data, callback){\r\n        callback(true);\r\n        socket.username = data;\r\n        const object = {\r\n            username: socket.username,\r\n            image: userImage\r\n        };\r\n\r\n        users.push(object);\r\n        updateUsernames();\r\n    });\r\n\r\n    // Update usernames\r\n    function updateUsernames(){\r\n        socket.on('send users', function () {\r\n            io.sockets.emit('get users', users);\r\n        })\r\n\r\n    }\r\n    //get and emit messages from mongo\r\n\r\n    //get and emit chatrooms from mongo\r\n    chatRoom.find(function (err, rooms) {\r\n        if(err) return console.error(err);\r\n        io.sockets.emit('get rooms', rooms);\r\n    });\r\n\r\n});\r\n\r\n"]}