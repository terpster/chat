{"version":3,"sources":["../server.js"],"names":["express","require","app","server","createServer","moment","io","listen","message","chatRoom","users","connections","console","log","set","use","static","__dirname","get","req","res","render","sockets","on","socket","push","currentRoom","length","join","emit","data","splice","indexOf","username","updateUsernames","find","room","err","messages","error","in","user","created","newMsg","save","newRoom","leave","rooms"],"mappings":"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","file":"server.js","sourcesContent":["/**\n * Created by Kasper Terp on 21-02-2017.\n */\n//Constant variables\nconst express = require('express');\nconst app = express();\n//Create the server\nconst server = require('http').createServer(app);\nconst moment = require('moment');\nconst io = require('socket.io').listen(server);\nconst message = require('./dist/Models/schema.server.model');\nconst chatRoom = require('./dist/Models/schema.chatrooms.model');\nconst users = [];\nconst connections = [];\n//Listen for the server on a specific port\nserver.listen(3000);\nconsole.log('Server is running');\n\n//ExpressJS set the view engine\napp.set('view engine', 'ejs');\napp.use(express.static(__dirname + '/'));\napp.get('/',function (req, res) {\n    res.render('index');\n});\n\n//Connect\nio.sockets.on('connection', function(socket){\n    connections.push(socket);\n    let currentRoom = 'room 1';\n    console.log('Connected: %s sockets connected', connections.length);\n    socket.join(currentRoom);\n    socket.emit('selectedRoom', currentRoom);\n    //Disconnect\n    socket.on('disconnect', function(data){\n        users.splice(users.indexOf(socket.username), 1);\n        updateUsernames();\n        connections.splice(connections.indexOf(socket), 1);\n        console.log('Disconnected: %s sockets connected', connections.length);\n    });\n\n    //Getting messages for current default room, before the socket\n    message.find({room: currentRoom},function (err, messages) {\n        if(err) return console.error(err);\n        io.sockets.emit('get messages', messages);\n    });\n    //Get the username from frontend, push it to the users array, and updateUsernames accordinly\n    socket.on('new user', function (data) {\n        socket.username = data;\n        users.push(socket.username);\n        io.sockets.emit('usernames', users);\n        updateUsernames();\n    });\n    //Recieve the text/message and send the message to the currently selected room\n    socket.on('send message', function(data){\n        io.in(currentRoom).emit('new message', {message: data.message, user: data.user, created: data.created});\n        // Create new message object\n        let newMsg = new message ({ user: data.user, message: data.message, room: currentRoom });\n\n        //Insert the message object into the DB using the schema\n        newMsg.save(function (err, newMsg) {\n            if (err) return console.error(err);\n            console.log(newMsg +\" the message is saved!\");\n        });\n\n    });\n    //When a new room is created, the room is saved into the DB using the schema\n    socket.on('create room',function(data) {\n        socket.emit('new room',{room: data});\n        const newRoom = new chatRoom({ room: data});\n        newRoom.save(function (err, newRoom) {\n            if (err) return console.error(err);\n            console.log(\"room is saved :\", newRoom);\n        });\n    });\n    //When a room is selected that room is then assigned as the currentRoom, and the socket is joined on that\n    socket.on('selected room', function (data) {\n        socket.leave(currentRoom);\n        currentRoom = data;\n        socket.join(data);\n        socket.emit('selectedRoom', data);\n        message.find({room: data},function (err, messages) {\n            if(err) return console.error(err);\n            socket.emit('get messages', messages);\n        });\n    });\n    //get and emit chatrooms from mongo\n    chatRoom.find(function (err, rooms) {\n        if(err) return console.error(err);\n        io.sockets.emit('get rooms', rooms);\n    });\n\n    //Update usernames, emits the users array\n    function updateUsernames(){\n        io.sockets.emit('get users', users);\n    }\n});\n\n"]}