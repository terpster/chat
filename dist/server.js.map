{"version":3,"sources":["../server.js"],"names":["express","require","app","server","createServer","io","listen","message","chatRoom","currentRoom","users","connections","images","messages","console","log","set","use","static","__dirname","get","req","res","find","err","rooms","error","render","sockets","on","socket","push","length","join","data","splice","indexOf","username","updateUsernames","callback","in","emit","user","image","userImage","newMsg","room","save","newRoom","object","selectRandomImage","Math","floor","random"],"mappings":"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","file":"server.js","sourcesContent":["// /**\r\n//  * Created by Kasper Terp on 21-02-2017.\r\n//  */\r\n// const express = require('express');\r\n// const app = express();\r\n// const server = require('http').createServer(app);\r\n// const io = require('socket.io').listen(server);\r\n// const mongoose = require('mongoose');\r\n// const message = require('./dist/Models/schema.server.model');\r\n//\r\n// users = [];\r\n// connections =[];\r\n// app.use(express.static(__dirname + '/'));\r\n// server.listen(process.env.PORT || 3000);\r\n// console.log(\"server is running\");\r\n//\r\n// app.get('/', function (req, res) {\r\n//     res.sendFile(__dirname + '/index.ejs')\r\n//\r\n// });\r\n//\r\n// // //new user\r\n// // socket.on('new user', function (data, callback) {\r\n// //     callback(true);\r\n// //     username = socket.username;\r\n// // });\r\n//\r\n//\r\n// io.sockets.on('connection', function (socket) {\r\n//     connections.push(socket);\r\n//     console.log('connected : %s socekts connected', + connections.length);\r\n//     // discconnect\r\n//     socket.on('disconnect', function (data) {\r\n//         connections.splice(connections.indexOf(socket), 1);\r\n//         console.log(\"disconnected: %s  sockets connected\", + connections.length)\r\n//     });\r\n//     socket.on ('send message', function (data) {\r\n//         io.sockets.emit('new message', {msg: data});\r\n//         console.log(data);\r\n//         let newMsg = new message({user: socket.user, message: data, room: socket.chatroom});\r\n//         newMsg.save(function (err, newMsg) {\r\n//             if(err) return console.log(err);\r\n//             console.log(\"im saved fuckeheads\");\r\n//\r\n//         });\r\n//\r\n//     });\r\n// });\r\n\r\n\r\n\r\n\r\n// const moment = require('moment'); //timestamps\r\nconst express = require('express');\r\nconst app = express();\r\nconst server = require('http').createServer(app);\r\nconst io = require('socket.io').listen(server);\r\nconst message = require('./dist/Models/schema.server.model');\r\nlet chatRoom = require('./dist/Models/schema.chatrooms.model');\r\nlet currentRoom = 'room 1';\r\nconst users = [];\r\nconst connections = [];\r\nconst images = [\"yuna\", \"kim\", \"james\", \"kasper\", \"jane\", \"mike\", \"lin\", \"karl\", \"julia\", \"jones\", \"helen\", \"chris\"];\r\n\r\nlet messages= [];\r\n\r\nserver.listen(3000);\r\nconsole.log('Server running...');\r\n\r\napp.set('view engine', 'ejs');\r\n// Allow static files to be used\r\napp.use(express.static(__dirname + '/'));\r\n\r\napp.get('/',function (req, res) {\r\n\r\n    chatRoom.find(function (err, rooms) {\r\n        if(err) return console.error(err);\r\n        res.render('index',{chatRoom: rooms});\r\n    });\r\n});\r\n\r\nio.sockets.on('connection', function(socket){\r\n    connections.push(socket);\r\n    console.log('Connected: %s sockets connected', connections.length);\r\n    socket.join(currentRoom);\r\n    // Disconnect\r\n    socket.on('disconnect', function(data){\r\n        users.splice(users.indexOf(socket.username), 1);\r\n        updateUsernames();\r\n        connections.splice(connections.indexOf(socket), 1);\r\n        console.log('Disconnected: %s sockets connected', connections.length);\r\n    });\r\n//new user\r\n    socket.on('new user', function (data, callback) {\r\n        callback(true);\r\n        username = socket.username;\r\n    });\r\n    // Send message\r\n    socket.on('send message', function(data){\r\n        io.in(currentRoom).emit('new message', {message: data.message, user: data.user, image: userImage});\r\n                // Create new message\r\n        let newMsg = new message ({ user: data.user, message: data.message, room: currentRoom });\r\n\r\n        // Insert to db\r\n        newMsg.save(function (err, newMsg) {\r\n            if (err) return console.error(err);\r\n            console.log(\"message is saved\");\r\n        });\r\n\r\n    });\r\n    socket.on('create room',function(data) {\r\n        io.emit('new room',{room: data});\r\n        const newRoom = new chatRoom({ room: data});\r\n        newRoom.save(function (err, newRoom) {\r\n            if (err) return console.error(err);\r\n            console.log(\"room is saved\");\r\n        });\r\n    });\r\n\r\n\r\n    // New user\r\n    socket.on('new user', function(data, callback){\r\n        callback(true);\r\n        socket.username = data;\r\n\r\n        const object = {\r\n            username: socket.username,\r\n            image: userImage\r\n        };\r\n\r\n        users.push(object);\r\n        updateUsernames();\r\n    });\r\n\r\n    // Update usernames\r\n    function updateUsernames(){\r\n        io.sockets.emit('get users', users);\r\n    }\r\n    //get and emit messages from mongo\r\n    message.find(function (err, messages) {\r\n        if(err) return console.error(err);\r\n        io.sockets.emit('get messages', messages);\r\n    });\r\n    //get and emit chatrooms from mongo\r\n    chatRoom.find(function (err, rooms) {\r\n        if(err) return console.error(err);\r\n        io.sockets.emit('get rooms', rooms);\r\n    });\r\n\r\n\r\n    function selectRandomImage(){\r\n        return images[Math.floor(Math.random()*images.length)];\r\n    }\r\n    let userImage = selectRandomImage(); // Select random image for the new user\r\n\r\n});\r\n\r\n"]}