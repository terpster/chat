{"version":3,"sources":["../server.js"],"names":["express","require","app","server","createServer","moment","io","listen","message","chatRoom","users","connections","console","log","set","use","static","__dirname","get","req","res","find","err","rooms","error","render","sockets","on","socket","currentRoom","push","length","join","data","splice","indexOf","username","updateUsernames","room","messages","emit","in","user","created","newMsg","save","newRoom"],"mappings":"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","file":"server.js","sourcesContent":["/**\r\n * Created by Kasper Terp on 21-02-2017.\r\n */\r\nconst express = require('express');\r\nconst app = express();\r\nconst server = require('http').createServer(app);\r\nconst moment = require('moment');\r\nconst io = require('socket.io').listen(server);\r\nconst message = require('./dist/Models/schema.server.model');\r\nlet chatRoom = require('./dist/Models/schema.chatrooms.model');\r\nconst users = [];\r\nconst connections = [];\r\nserver.listen(3000);\r\nconsole.log('Server running...');\r\napp.set('view engine', 'ejs');\r\napp.use(express.static(__dirname + '/'));\r\n\r\napp.get('/',function (req, res) {\r\n\r\n    chatRoom.find(function (err, rooms) {\r\n        if(err) return console.error(err);\r\n        res.render('index',{chatRoom: rooms});\r\n    });\r\n});\r\n    //connect\r\nio.sockets.on('connection', function(socket){\r\n    let currentRoom = 'room 1';\r\n    connections.push(socket);\r\n    console.log('Connected: %s sockets connected', connections.length);\r\n    socket.join(currentRoom);\r\n\r\n    // Disconnect\r\n    socket.on('disconnect', function(data){\r\n        users.splice(users.indexOf(socket.username), 1);\r\n        updateUsernames();\r\n        connections.splice(connections.indexOf(socket), 1);\r\n        console.log('Disconnected: %s sockets connected', connections.length);\r\n    });\r\n\r\n    //Getting messages for current default room, before the socket\r\n    message.find({room: currentRoom},function (err, messages) {\r\n        if(err) return console.error(err);\r\n        io.sockets.emit('get messages', messages);\r\n    });\r\n\r\n    socket.on('new user', function (data) {\r\n            socket.username = data;\r\n            console.log(socket.username);\r\n            users.push(socket.username);\r\n            io.sockets.emit('usernames', users);\r\n            updateUsernames();\r\n    });\r\n    // Send message\r\n    socket.on('send message', function(data){\r\n        io.in(currentRoom).emit('new message', {message: data.message, user: data.user, created: data.created});\r\n        // Create new message\r\n        let newMsg = new message ({ user: data.user, message: data.message, room: currentRoom });\r\n\r\n        // Insert to db\r\n        newMsg.save(function (err, newMsg) {\r\n            if (err) return console.error(err);\r\n            console.log(\"message is saved\");\r\n        });\r\n\r\n    });\r\n    socket.on('create room',function(data) {\r\n        io.emit('new room',{room: data});\r\n        const newRoom = new chatRoom({ room: data});\r\n        newRoom.save(function (err, newRoom) {\r\n            if (err) return console.error(err);\r\n            console.log(\"room is saved\");\r\n        });\r\n    });\r\n    socket.on('selected room', function (data) {\r\n        currentRoom = data;\r\n        socket.join(currentRoom);\r\n\r\n        message.find({room: data},function (err, messages) {\r\n            if(err) return console.error(err);\r\n            io.sockets.emit('get messages', messages);\r\n        });\r\n    });\r\n\r\n\r\n    // Update usernames\r\n    function updateUsernames(){\r\n            io.sockets.emit('get users', users);\r\n    }\r\n\r\n    //get and emit chatrooms from mongo\r\n    chatRoom.find(function (err, rooms) {\r\n        if(err) return console.error(err);\r\n        io.sockets.emit('get rooms', rooms);\r\n    });\r\n\r\n});\r\n\r\n"]}