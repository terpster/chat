{"version":3,"sources":["../server.js"],"names":["express","require","app","server","createServer","io","listen","message","currentRoom","users","connections","images","messages","console","log","set","use","static","__dirname","get","req","res","render","sockets","on","socket","push","length","join","data","splice","indexOf","username","updateUsernames","in","emit","msg","user","image","userImage","newMsg","room","save","err","error","callback","object","find","selectRandomImage","Math","floor","random"],"mappings":"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","file":"server.js","sourcesContent":["// /**\r\n//  * Created by Kasper Terp on 21-02-2017.\r\n//  */\r\n// const express = require('express');\r\n// const app = express();\r\n// const server = require('http').createServer(app);\r\n// const io = require('socket.io').listen(server);\r\n// const mongoose = require('mongoose');\r\n// const message = require('./dist/Models/schema.server.model');\r\n//\r\n// users = [];\r\n// connections =[];\r\n// app.use(express.static(__dirname + '/'));\r\n// server.listen(process.env.PORT || 3000);\r\n// console.log(\"server is running\");\r\n//\r\n// app.get('/', function (req, res) {\r\n//     res.sendFile(__dirname + '/index.ejs')\r\n//\r\n// });\r\n//\r\n// // //new user\r\n// // socket.on('new user', function (data, callback) {\r\n// //     callback(true);\r\n// //     username = socket.username;\r\n// // });\r\n//\r\n//\r\n// io.sockets.on('connection', function (socket) {\r\n//     connections.push(socket);\r\n//     console.log('connected : %s socekts connected', + connections.length);\r\n//     // discconnect\r\n//     socket.on('disconnect', function (data) {\r\n//         connections.splice(connections.indexOf(socket), 1);\r\n//         console.log(\"disconnected: %s  sockets connected\", + connections.length)\r\n//     });\r\n//     socket.on ('send message', function (data) {\r\n//         io.sockets.emit('new message', {msg: data});\r\n//         console.log(data);\r\n//         let newMsg = new message({user: socket.user, message: data, room: socket.chatroom});\r\n//         newMsg.save(function (err, newMsg) {\r\n//             if(err) return console.log(err);\r\n//             console.log(\"im saved fuckeheads\");\r\n//\r\n//         });\r\n//\r\n//     });\r\n// });\r\n\r\n\r\n\r\n\r\n// const moment = require('moment'); //timestamps\r\nconst express = require('express');\r\nconst app = express();\r\nconst server = require('http').createServer(app);\r\nconst io = require('socket.io').listen(server);\r\nconst message = require('./dist/Models/schema.server.model');\r\nlet currentRoom = 'room 1';\r\nconst users = [];\r\nconst connections = [];\r\nconst images = [\"yuna\", \"kim\", \"james\", \"kasper\", \"jane\", \"mike\", \"lin\", \"karl\", \"julia\", \"jones\", \"helen\", \"chris\"];\r\n\r\nlet messages= [];\r\n\r\nserver.listen(3000);\r\nconsole.log('Server running...');\r\n\r\napp.set('view engine', 'ejs');\r\n// Allow static files to be used\r\napp.use(express.static(__dirname + '/'));\r\napp.get('/', function(req, res) {\r\n    res.render('index');\r\n});\r\nio.sockets.on('connection', function(socket){\r\n    connections.push(socket);\r\n    console.log('Connected: %s sockets connected', connections.length);\r\n    socket.join(currentRoom);\r\n    // Disconnect\r\n    socket.on('disconnect', function(data){\r\n        users.splice(users.indexOf(socket.username), 1);\r\n        updateUsernames();\r\n        connections.splice(connections.indexOf(socket), 1);\r\n        console.log('Disconnected: %s sockets connected', connections.length);\r\n    });\r\n\r\n    // Send message\r\n    socket.on('send message', function(data){\r\n        io.in(currentRoom).emit('new message', {msg: data, user: socket.username, image: userImage});\r\n        // io.sockets.emit('new message', {msg: data, user: socket.username, image: userImage});\r\n\r\n        // Create new message\r\n        let newMsg = new message ({ user: socket.username, message: data, room: currentRoom });\r\n\r\n        // Insert to db\r\n        newMsg.save(function (err, newMsg) {\r\n            if (err) return console.error(err);\r\n            console.log(\"message is saved\");\r\n        });\r\n\r\n    });\r\n\r\n\r\n    // New user\r\n    socket.on('new user', function(data, callback){\r\n        callback(true);\r\n        socket.username = data;\r\n\r\n        const object = {\r\n            username: socket.username,\r\n            image: userImage\r\n        };\r\n\r\n        users.push(object);\r\n        updateUsernames();\r\n    });\r\n\r\n    // Update usernames\r\n    function updateUsernames(){\r\n        io.sockets.emit('get users', users);\r\n    }\r\n    //get and emit messages from mongo\r\n        message.find(function (err, messages) {\r\n        if(err) return console.error(err);\r\n            console.log(messages);\r\n            io.sockets.emit('get messages', messages);\r\n    });\r\n\r\n    function selectRandomImage(){\r\n        return images[Math.floor(Math.random()*images.length)];\r\n    }\r\n    let userImage = selectRandomImage(); // Select random image for the new user\r\n\r\n    // function messageTimestamp(){\r\n    //     return moment().calendar();\r\n    //     // Today at 9:07 PM\r\n    // }\r\n\r\n});\r\n\r\n"]}