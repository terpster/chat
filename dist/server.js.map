{"version":3,"sources":["../server.js"],"names":["express","require","app","server","createServer","moment","io","listen","message","chatRoom","users","connections","console","log","set","use","static","__dirname","get","req","res","render","sockets","on","socket","push","currentRoom","length","join","emit","data","splice","indexOf","username","updateUsernames","find","room","err","messages","error","in","user","created","newMsg","save","newRoom","leave","rooms"],"mappings":"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","file":"server.js","sourcesContent":["/**\r\n * Created by Kasper Terp on 21-02-2017.\r\n */\r\nconst express = require('express');\r\nconst app = express();\r\nconst server = require('http').createServer(app);\r\nconst moment = require('moment');\r\nconst io = require('socket.io').listen(server);\r\nconst message = require('./dist/Models/schema.server.model');\r\nconst chatRoom = require('./dist/Models/schema.chatrooms.model');\r\nconst users = [];\r\nconst connections = [];\r\n\r\nserver.listen(3000);\r\n\r\nconsole.log('Server running...');\r\napp.set('view engine', 'ejs');\r\napp.use(express.static(__dirname + '/'));\r\n\r\napp.get('/',function (req, res) {\r\n        res.render('index');\r\n    });\r\n\r\n    //connect\r\nio.sockets.on('connection', function(socket){\r\n    connections.push(socket);\r\n    let currentRoom = 'room 1';\r\n    console.log('Connected: %s sockets connected', connections.length);\r\n    socket.join(currentRoom);\r\n    socket.emit('selectedRoom', currentRoom);\r\n    // Disconnect\r\n    socket.on('disconnect', function(data){\r\n        users.splice(users.indexOf(socket.username), 1);\r\n        updateUsernames();\r\n        connections.splice(connections.indexOf(socket), 1);\r\n        console.log('Disconnected: %s sockets connected', connections.length);\r\n    });\r\n\r\n    //Getting messages for current default room, before the socket\r\n    message.find({room: currentRoom},function (err, messages) {\r\n        if(err) return console.error(err);\r\n        io.sockets.emit('get messages', messages);\r\n    });\r\n\r\n    socket.on('new user', function (data) {\r\n            socket.username = data;\r\n            console.log(socket.username);\r\n            users.push(socket.username);\r\n            io.sockets.emit('usernames', users);\r\n            updateUsernames();\r\n    });\r\n    // Send message\r\n    socket.on('send message', function(data){\r\n        io.in(currentRoom).emit('new message', {message: data.message, user: data.user, created: data.created});\r\n        // Create new message\r\n        let newMsg = new message ({ user: data.user, message: data.message, room: currentRoom });\r\n\r\n        // Insert to db\r\n        newMsg.save(function (err, newMsg) {\r\n            if (err) return console.error(err);\r\n            console.log(\"message is saved\");\r\n        });\r\n\r\n    });\r\n    socket.on('create room',function(data) {\r\n        socket.emit('new room',{room: data});\r\n        const newRoom = new chatRoom({ room: data});\r\n        newRoom.save(function (err, newRoom) {\r\n            if (err) return console.error(err);\r\n            console.log(\"room is saved :\", newRoom);\r\n        });\r\n    });\r\n    socket.on('selected room', function (data) {\r\n        socket.leave(currentRoom);\r\n        currentRoom = data;\r\n        socket.join(data);\r\n        socket.emit('selectedRoom', data);\r\n        message.find({room: data},function (err, messages) {\r\n            if(err) return console.error(err);\r\n            socket.emit('get messages', messages);\r\n        });\r\n    });\r\n    //get and emit chatrooms from mongo\r\n    chatRoom.find(function (err, rooms) {\r\n        if(err) return console.error(err);\r\n        io.sockets.emit('get rooms', rooms);\r\n    });\r\n\r\n    // Update usernames\r\n    function updateUsernames(){\r\n            io.sockets.emit('get users', users);\r\n    }\r\n\r\n\r\n\r\n});\r\n\r\n"]}